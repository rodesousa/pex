# Kucoin

## Portfolio

```elixir
Pex.KucoinTrade.coins_list()
```

## Gets pairs without trade

```elixir
Pex.KucoinTrade.coins_list_without_trade()
```

## Gets trades

```elixir
Pex.Data.list_trades()
|> Enum.filter(&(&1.stop_loss != nil and &1.platform == "kucoin"))
|> Enum.map(fn order ->
  {:ok, %{price: price}} = Pex.KucoinTrade.get_price(order.symbol)
  current_price = String.to_float(price)
  percent = Pex.Stat.percent_order(order, current_price)

  %{
    id: order.id,
    coin: order.symbol,
    sl: order.stop_loss,
    tp: order.take_profit,
    percent: Float.ceil(percent, 2),
    bought: order.price
  }
end)
|> Enum.sort(&(&1.coin > &2.coin))
```

## Gets shad trades

```elixir
Pex.Data.list_trades()
|> Enum.filter(&(&1.stop_loss == nil and &1.platform == "kucoin"))
|> Enum.map(fn order ->
  {:ok, %{price: price}} = Pex.KucoinTrade.get_price(order.symbol)
  current_price = String.to_float(price)
  percent = Pex.Stat.percent_order(order, current_price)

  %{
    id: order.id,
    coin: order.symbol,
    sl: order.stop_loss,
    tp: order.take_profit,
    percent: Float.ceil(percent, 2),
    bought: order.price
  }
end)
|> Enum.sort(&(&1.coin > &2.coin))
```

## RiskManagement

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":"GALAX"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"distance","type":"number","value":"21"} -->

```elixir
{distance, _} = IO.gets("distance") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

price = Pex.KucoinTrade.coin_price_usdt(symbol)
balance = Pex.KucoinTrade.get_balance()

params = %{
  balance: balance,
  risk: 1.0,
  distance: distance,
  coin_price: price,
  future: 1
}

risk = Pex.RiskManagement.computes_risk(params)

"#{risk.quantity} #{symbol} pour un total de #{risk.cost} $ avec un stop loss à #{risk.stop_loss} (prix: #{price})"
```

## Buy market

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"distance","type":"number","value":"9.5"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"take_profit","type":"text","value":"0.00439"} -->

```elixir
{take_profit, _} = IO.gets("take_profit") |> Float.parse()
{distance, _} = IO.gets("distance") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

price = Pex.KucoinTrade.coin_price_usdt(symbol)
balance = Pex.KucoinTrade.get_balance()

params = %{
  balance: balance,
  risk: 1.0,
  distance: distance,
  coin_price: price,
  future: 1
}

risk = Pex.RiskManagement.computes_risk(params)

IO.inspect(
  "#{risk.quantity} #{symbol} pour un total de #{risk.cost} $ avec un stop loss à #{risk.stop_loss} (prix: #{price})"
)

Pex.KucoinTrade.buy_market(symbol, 53055, take_profit, risk.stop_loss)
```

## Buy Market shad

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")

balance = Pex.KucoinTrade.get_balance()

Pex.KucoinTrade.buy_market(symbol, balance * 0.01, nil, nil)
```
