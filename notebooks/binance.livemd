# Trading

## Binance portfolio

```elixir
Pex.BinanceTrade.coins_list()
```

## Trades not saved

```elixir
Pex.BinanceTrade.coins_list_without_trade()
```

## Trade saved

```elixir
Pex.Data.list_trades()
|> Enum.filter(&(&1.stop_loss != nil))
|> Enum.map(fn order ->
  {:ok, %{price: price}} = Pex.BinanceAPI.get_price(order.symbol)
  current_price = String.to_float(price)
  percent = Pex.Stat.percent_order(order, current_price)

  %{
    id: order.id,
    coin: order.symbol,
    sl: order.stop_loss,
    tp: order.take_profit,
    # price: current_price,
    percent: Float.ceil(percent, 2),
    bought: order.price
  }
end)
|> Enum.sort(&(&1.coin > &2.coin))
```

## Old binance order

<!-- livebook:{"livebook_object":"cell_input","name":"limit","type":"number","value":"2"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":"CRVUSDT"} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
{limit, _a} = IO.gets("limit") |> Integer.parse()

{:ok, data} = Binance.account_trade_list(symbol, limit)

data
|> Enum.map(
  &%{
    quantity: &1.qty,
    price: &1.price,
    id: &1.id
  }
)
```

## Cancel binance order

<!-- livebook:{"livebook_object":"cell_input","name":"order_id","type":"text","value":""} -->

```elixir
order_id = IO.gets("order_id") |> String.trim("\n")

Binance.cancel_order(symbol, 5000, order_id)
```

## Delete trade

<!-- livebook:{"livebook_object":"cell_input","name":"order_id","type":"number","value":""} -->

```elixir
{id, _} = IO.gets("order_id") |> Integer.parse()

Pex.Data.delete_trade(id)
```

## Risk management

<!-- livebook:{"livebook_object":"cell_input","name":"pair","type":"text","value":"OCEANUSDT"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"distance","type":"number","value":"15.0"} -->

```elixir
{distance, _} = IO.gets("distance") |> Float.parse()
pair = IO.gets("pair") |> String.trim("\n")

{:ok, risk} = Pex.BinanceTrade.init_risk_management(pair, distance)

"#{risk.quantity} #{pair} pour un total de #{risk.cost} $ avec un stop loss Ã  #{risk.stop_loss} (prix: #{risk.pair_price})"
```

## Buy Trade

<!-- livebook:{"livebook_object":"cell_input","name":"pair","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"tp","type":"number","value":"2.65"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"distance","type":"number","value":"21.0"} -->

```elixir
{tp, _} = IO.gets("tp") |> Float.parse()
{distance, _} = IO.gets("distance") |> Float.parse()
pair = IO.gets("pair") |> String.trim("\n")
[coin_1, coin_2] = String.split(pair, "/")

Pex.BinanceTrade.trade_buy(coin_1, coin_2, tp, distance)
```
