# Trading

## Creds

```elixir
Pex.BinanceTrade.creds()
```

## Gets binance coins list

```elixir
Pex.BinanceTrade.coins_list()
```

## Gets coins without binance order

```elixir
Pex.BinanceTrade.coins_list_without_exchange_order()
```

## Gets coins without local order

```elixir
Pex.BinanceTrade.coins_list_without_local_order()
```

## Gets local coins list

```elixir
Pex.Data.list_trades()
|> Enum.filter(&(&1.stop_loss != nil))
|> Enum.map(fn order ->
  {:ok, %{price: price}} = Pex.BinanceAPI.get_price(order.symbol)
  current_price = String.to_float(price)
  percent = Pex.Stat.percent_order(order, current_price)

  %{
    id: order.id,
    coin: order.symbol,
    # sl: order.stop_loss,
    # tp: order.take_profit,
    # price: current_price,
    percent: Float.ceil(percent, 2)
    # bought: order.price
  }
end)
|> Enum.sort(&(&1.percent > &2.percent))
```

## Gets local coins list in shad

```elixir
Pex.Orders.list_orders()
|> Enum.filter(&(&1.stop_loss == nil))
|> Enum.map(fn order ->
  current_price = Pex.BinanceTrade.get_price(order.symbol) |> String.to_float()
  percent = Pex.Trade.percent_order(order, current_price)

  %{
    id: order.id,
    coin: order.symbol,
    PERCENT: Float.ceil(percent, 2)
  }
end)
```

## Creates local order

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"stop_loss_order_id","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"take_profit_order_id","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
stop_loss_order_id = IO.gets("stop_loss_order_id") |> String.trim("\n")
take_profit_order_id = IO.gets("take_profit_order_id") |> String.trim("\n")
{price, _a} = IO.gets("price") |> Float.parse()

Pex.BinanceTrade.create_trade(%{
  stop_loss_order_id: stop_loss_order_id,
  take_profit_order_id: take_profit_order_id,
  symbol: symbol,
  price: price
})
```

## Creates shad local order

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"take_profit_order_id","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
take_profit_order_id = IO.gets("take_profit_order_id") |> String.trim("\n")
{price, _a} = IO.gets("price") |> Float.parse()

Pex.BinanceTrade.create_shad(%{
  take_profit_order_id: take_profit_order_id,
  symbol: symbol,
  price: price
})
```

## Gets old trades

<!-- livebook:{"livebook_object":"cell_input","name":"limit","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
{limit, _a} = IO.gets("limit") |> Integer.parse()

{:ok, data} = Binance.account_trade_list(symbol, limit)

data
|> Enum.map(
  &%{
    quantity: &1.qty,
    price: &1.price,
    id: &1.id
  }
)
```

## Cancel binance order

<!-- livebook:{"livebook_object":"cell_input","name":"order_id","type":"text","value":""} -->

```elixir
order_id = IO.gets("order_id") |> String.trim("\n")

Binance.cancel_order(symbol, 5000, order_id)
```

## Cancel local order

<!-- livebook:{"livebook_object":"cell_input","name":"order_id","type":"number","value":""} -->

```elixir
{id, _} = IO.gets("order_id") |> Integer.parse()

Pex.Orders.delete_order(id)
```

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")

Binance.cancel_all_orders(symbol, 1000)
```

## Get order by symbol

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")

{:ok, results} = Binance.get_open_orders(symbol)

results
```

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
price = IO.gets("price")

Pex.Trade.create_purchase(%{symbol: symbol, price: price})
```

<!-- livebook:{"livebook_object":"cell_input","name":"order_id","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"purchase_id","type":"text","value":""} -->

```elixir
order_id = IO.gets("order_id") |> String.trim("\n")
purchase_id = IO.gets("purchase_id") |> String.trim("\n")

Pex.Trade.update_order(order_id, %{purchase_id: purchase_id})
```

## Buy Limit

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
symbol = IO.gets("symbol") |> String.trim("\n")
{quantity, _} = IO.gets("quantity") |> Float.parse()
{price, _} = IO.gets("price") |> Float.parse()
Binance.order_limit_buy(symbol, quantity, price)
```

## Sell limit

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
{price, _} = IO.gets("price") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

{:ok, order} = Binance.create_order(symbol, "SELL", "LIMIT", quantity, price, "GTC")

%{
  take_profit_order_id: order["orderId"],
  price: price,
  symbol: symbol
}
|> Pex.BinanceTrade.create_shad()
```

## Buy Stop Limit

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"stop","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
{stop, _} = IO.gets("stop") |> Float.parse()
{price, _} = IO.gets("price") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

Binance.create_order(
  symbol,
  "BUY",
  "STOP_LOSS_LIMIT",
  quantity,
  price,
  "GTC",
  nil,
  stop,
  nil,
  1000
)
```

## Sell stop limit

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"stop","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"price","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
{stop, _} = IO.gets("stop") |> Float.parse()
{price, _} = IO.gets("price") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

Binance.create_order(symbol, "SELL", "STOP_LOSS_LIMIT", quantity, price, "GTC", nil, stop)
```

## Sell oco (+ trade)

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"tp","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"stop","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"bought","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
{stop, _} = IO.gets("stop") |> Float.parse()
{tp, _} = IO.gets("tp") |> Float.parse()
limit = Pex.RiskManagement.computes_limit_from_stop(stop)
symbol = IO.gets("symbol") |> String.trim("\n")
{bought, _} = IO.gets("bought") |> Float.parse()

IO.inspect(limit)

{:ok, %{"orderReports" => order_reports}} =
  Binance.create_oco_order(symbol, "SELL", quantity, tp, stop, 0.6557)

Pex.BinanceTrade.create_trade_from_oco(symbol, bought, order_reports)
```

## Buy Market (+ oco)

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"distance","type":"number","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"tp","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
{tp, _} = IO.gets("tp") |> Float.parse()
{distance, _} = IO.gets("distance") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

Pex.BinanceTrade.buy_market(symbol, quantity, tp, distance)
```

## Buy Market (+ shad)

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

Pex.BinanceTrade.buy_market(symbol, quantity, nil, nil)
```

## Sell Market

<!-- livebook:{"livebook_object":"cell_input","name":"symbol","type":"text","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"quantity","type":"number","value":""} -->

```elixir
{quantity, _} = IO.gets("quantity") |> Float.parse()
symbol = IO.gets("symbol") |> String.trim("\n")

{:ok, coin} = Binance.order_market_sell(symbol, quantity)
```
